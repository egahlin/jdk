diff a/src/hotspot/share/jfr/support/jfrResolution.cpp b/src/hotspot/share/jfr/support/jfrResolution.cpp
--- a/src/hotspot/share/jfr/support/jfrResolution.cpp
+++ b/src/hotspot/share/jfr/support/jfrResolution.cpp
@@ -180,11 +180,11 @@
   }
   const vframeStream ljf(jt, true, false);
   return ljf.method();
 }
 
-static const char* const link_error_msg = "illegal access linking method 'jdk.jfr.internal.event.EventWriterFactory.getEventWriter(long)'";
+static const char* const link_error_msg = "illegal access linking method 'jdk.jfr.internal.event.EventWriter.getEventWriter()'";
 
 void JfrResolution::on_runtime_resolution(const CallInfo & info, TRAPS) {
   assert(info.selected_method() != nullptr, "invariant");
   assert(info.resolved_klass() != nullptr, "invariant");
   static const Symbol* const event_writer_method_name = vmSymbols::getEventWriter_name();
@@ -197,16 +197,16 @@
   }
   // Fast path
   if (method->name() != event_writer_method_name) {
     return;
   }
-  static const Symbol* const event_writer_factory_klass_name = vmSymbols::jdk_jfr_internal_event_EventWriterFactory();
-  assert(event_writer_factory_klass_name != nullptr, "invariant");
-  if (info.resolved_klass()->name() != event_writer_factory_klass_name) {
+  static const Symbol* const event_writer_klass_name = vmSymbols::jdk_jfr_internal_event_EventWriter();
+  assert(event_writer_klass_name != nullptr, "invariant");
+  if (info.resolved_klass()->name() != event_writer_klass_name) {
     return;
   }
-  // Attempting to link against jdk.jfr.internal.event.EventWriterFactory.getEventWriter().
+  // Attempting to link against jdk.jfr.internal.event.EventWriter.getEventWriter().
   // The sender, i.e. the method attempting to link, is in the ljf (if one exists).
   const Method* const sender = ljf_sender_method(THREAD);
   if (sender == nullptr) {
     // A compiler thread is doing linktime resolution but there is no information about the sender available.
     // For the compiler threads, the sender is instead found as part of bytecode parsing.
@@ -226,13 +226,13 @@
 #endif
   THROW_MSG(vmSymbols::java_lang_IllegalAccessError(), link_error_msg);
 }
 
 static inline bool is_compiler_linking_event_writer(const Symbol* holder, const Symbol* name) {
-  static const Symbol* const event_writer_factory_klass_name = vmSymbols::jdk_jfr_internal_event_EventWriterFactory();
-  assert(event_writer_factory_klass_name != nullptr, "invariant");
-  if (holder != event_writer_factory_klass_name) {
+  static const Symbol* const event_writer_klass_name = vmSymbols::jdk_jfr_internal_event_EventWriter();
+  assert(event_writer_klass_name != nullptr, "invariant");
+  if (holder != event_writer_klass_name) {
     return false;
   }
   static const Symbol* const event_writer_method_name = vmSymbols::getEventWriter_name();
   assert(event_writer_method_name != nullptr, "invariant");
   return name == event_writer_method_name;
