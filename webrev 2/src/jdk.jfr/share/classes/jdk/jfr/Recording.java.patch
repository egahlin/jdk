diff a/src/jdk.jfr/share/classes/jdk/jfr/Recording.java b/src/jdk.jfr/share/classes/jdk/jfr/Recording.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/Recording.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/Recording.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2016, 2024, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2025, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -37,11 +37,11 @@
 
 import jdk.jfr.internal.PlatformRecorder;
 import jdk.jfr.internal.PlatformRecording;
 import jdk.jfr.internal.Type;
 import jdk.jfr.internal.util.Utils;
-import jdk.jfr.internal.WriteableUserPath;
+import jdk.jfr.internal.WriteablePath;
 
 /**
  * Provides means to configure, start, stop and dump recording data to disk.
  * <p>
  * The following example shows how configure, start, stop and dump recording data to disk.
@@ -366,11 +366,11 @@
      * @see #getState()
      * @see #isToDisk()
      */
     public void dump(Path destination) throws IOException {
         Objects.requireNonNull(destination, "destination");
-        internal.dump(new WriteableUserPath(destination));
+        internal.dump(new WriteablePath(destination));
     }
 
     /**
      * Returns {@code true} if this recording uses the disk repository, {@code false} otherwise.
      * <p>
@@ -459,25 +459,25 @@
      *         {@code CLOSED} state.
      *
      * @throws IOException if the path is not writable
      */
     public void setDestination(Path destination) throws IOException {
-        internal.setDestination(destination != null ? new WriteableUserPath(destination) : null);
+        internal.setDestination(destination != null ? new WriteablePath(destination) : null);
     }
 
     /**
      * Returns the destination file, where recording data is written when the
      * recording stops, or {@code null} if no destination is set.
      *
      * @return the destination file, or {@code null} if not set.
      */
     public Path getDestination() {
-        WriteableUserPath usp = internal.getDestination();
-        if (usp == null) {
+        WriteablePath wp = internal.getDestination();
+        if (wp == null) {
             return null;
         } else {
-            return usp.getPotentiallyMaliciousOriginal();
+            return wp.getPath();
         }
     }
 
     /**
      * Returns a unique ID for this recording.
