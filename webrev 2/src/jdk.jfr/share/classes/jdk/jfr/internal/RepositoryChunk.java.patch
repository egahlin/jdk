diff a/src/jdk.jfr/share/classes/jdk/jfr/internal/RepositoryChunk.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/RepositoryChunk.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/RepositoryChunk.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/RepositoryChunk.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2012, 2024, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2025, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -25,42 +25,44 @@
 
 package jdk.jfr.internal;
 
 import java.io.IOException;
 import java.io.RandomAccessFile;
+import java.nio.channels.FileChannel;
 import java.nio.channels.ReadableByteChannel;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.StandardOpenOption;
 import java.time.Instant;
 import java.util.Comparator;
 
-import jdk.jfr.internal.SecuritySupport.SafePath;
-
 public final class RepositoryChunk {
 
     static final Comparator<RepositoryChunk> END_TIME_COMPARATOR = new Comparator<RepositoryChunk>() {
         @Override
         public int compare(RepositoryChunk c1, RepositoryChunk c2) {
             return c1.endTime.compareTo(c2.endTime);
         }
     };
 
-    private final SafePath chunkFile;
+    private final Path chunkFile;
     private final RandomAccessFile unFinishedRAF;
 
     private Instant endTime = null; // unfinished
     private Instant startTime;
     private int refCount = 1;
     private long size;
 
-    RepositoryChunk(SafePath path) throws Exception {
+    RepositoryChunk(Path path) throws Exception {
         this.chunkFile = path;
-        this.unFinishedRAF = SecuritySupport.createRandomAccessFile(chunkFile);
+        this.unFinishedRAF = new RandomAccessFile(path.toFile(), "rw");
     }
 
     boolean finish(Instant endTime) {
         try {
             unFinishedRAF.close();
-            size = SecuritySupport.getFileSize(chunkFile);
+            size = Files.size(chunkFile);
             this.endTime = endTime;
             if (Logger.shouldLog(LogTag.JFR_SYSTEM, LogLevel.DEBUG)) {
                 Logger.log(LogTag.JFR_SYSTEM, LogLevel.DEBUG, "Chunk finished: " + chunkFile);
             }
             return true;
@@ -87,13 +89,13 @@
 
     public Instant getEndTime() {
         return endTime;
     }
 
-    private void delete(SafePath f) {
+    private void delete(Path f) {
         try {
-            SecuritySupport.delete(f);
+            Files.delete(f);
             if (Logger.shouldLog(LogTag.JFR, LogLevel.DEBUG)) {
                 Logger.log(LogTag.JFR, LogLevel.DEBUG, "Repository chunk " + f + " deleted");
             }
         } catch (IOException e) {
             // Probably happens because file is being streamed
@@ -151,11 +153,11 @@
 
     ReadableByteChannel newChannel() throws IOException {
         if (!isFinished()) {
             throw new IOException("Chunk not finished");
         }
-        return ((SecuritySupport.newFileChannelToRead(chunkFile)));
+        return FileChannel.open(chunkFile, StandardOpenOption.READ);
     }
 
     public boolean inInterval(Instant startTime, Instant endTime) {
         if (startTime != null && getEndTime().isBefore(startTime)) {
             return false;
@@ -164,25 +166,21 @@
             return false;
         }
         return true;
     }
 
-    public SafePath getFile() {
+    public Path getFile() {
         return chunkFile;
     }
 
     public long getCurrentFileSize() {
         try {
-            return SecuritySupport.getFileSize(chunkFile);
+            return Files.size(chunkFile);
         } catch (IOException e) {
             return 0L;
         }
     }
 
     boolean isMissingFile() {
-        try {
-            return !SecuritySupport.exists(chunkFile);
-        } catch (IOException ioe) {
-            return true;
-        }
+        return !Files.exists(chunkFile);
     }
 }
