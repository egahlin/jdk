diff a/src/jdk.jfr/share/classes/jdk/jfr/internal/dcmd/AbstractDCmd.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/dcmd/AbstractDCmd.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/dcmd/AbstractDCmd.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/dcmd/AbstractDCmd.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2012, 2024, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2025, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -41,12 +41,10 @@
 import jdk.jfr.internal.util.Output;
 import jdk.jfr.internal.JVMSupport;
 import jdk.jfr.internal.LogLevel;
 import jdk.jfr.internal.LogTag;
 import jdk.jfr.internal.Logger;
-import jdk.jfr.internal.SecuritySupport;
-import jdk.jfr.internal.SecuritySupport.SafePath;
 import jdk.jfr.internal.util.ValueFormatter;
 
 /**
  * Base class for JFR diagnostic commands
  *
@@ -132,23 +130,23 @@
         // The pid will not be exposed to running Java application, only when starting
         // JFR from command line (-XX:StartFlightRecording) or jcmd (JFR.start and JFR.check)
         return JVM.getPid();
     }
 
-    protected final SafePath resolvePath(Recording recording, String filename) throws InvalidPathException {
+    protected Path resolvePath(Recording recording, String filename) throws InvalidPathException {
         if (filename == null) {
             return makeGenerated(recording, Paths.get("."));
         }
         Path path = Paths.get(filename);
         if (Files.isDirectory(path)) {
             return makeGenerated(recording, path);
         }
-        return new SafePath(path.toAbsolutePath().normalize());
+        return path.toAbsolutePath().normalize();
     }
 
-    private SafePath makeGenerated(Recording recording, Path directory) {
-        return new SafePath(directory.toAbsolutePath().resolve(JVMSupport.makeFilename(recording)).normalize());
+    private Path makeGenerated(Recording recording, Path directory) {
+        return directory.toAbsolutePath().resolve(JVMSupport.makeFilename(recording)).normalize();
     }
 
     protected final Recording findRecording(String name) throws DCmdException {
         try {
             return findRecordingById(Integer.parseInt(name));
@@ -156,21 +154,21 @@
             // User specified a name, not an id.
             return findRecordingByName(name);
         }
     }
 
-    protected final void reportOperationComplete(String actionPrefix, String name, SafePath file) {
+    protected final void reportOperationComplete(String actionPrefix, String name, Path file) {
         print(actionPrefix);
         print(" recording");
         if (name != null) {
             print(" \"" + name + "\"");
         }
         if (file != null) {
             print(",");
             try {
                 print(" ");
-                long bytes = SecuritySupport.getFileSize(file);
+                long bytes = Files.size(file);
                 printBytes(bytes);
             } catch (IOException e) {
                 // Ignore, not essential
             }
             println(" written to:");
@@ -217,37 +215,24 @@
 
     protected final void printTimespan(Duration timespan, String separator) {
         print(ValueFormatter.formatTimespan(timespan, separator));
     }
 
-    protected final void printPath(SafePath path) {
+    protected final void printPath(Path path) {
         if (path == null) {
             print("N/A");
             return;
         }
-        try {
-            printPath(SecuritySupport.getAbsolutePath(path).toPath());
-        } catch (IOException ioe) {
-            printPath(path.toPath());
-        }
+        println(path.toAbsolutePath().toString());
     }
 
     protected final void printHelpText() {
         for (String line : getHelp()) {
             println(line);
         }
     }
 
-    protected final void printPath(Path path) {
-        try {
-            println(path.toAbsolutePath().toString());
-        } catch (SecurityException e) {
-            // fall back on filename
-            println(path.toString());
-        }
-    }
-
     private Recording findRecordingById(int id) throws DCmdException {
         for (Recording r : getFlightRecorder().getRecordings()) {
             if (r.getId() == id) {
                 return r;
             }
