diff a/src/jdk.jfr/share/classes/jdk/jfr/internal/consumer/AbstractEventStream.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/consumer/AbstractEventStream.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/consumer/AbstractEventStream.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/consumer/AbstractEventStream.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2019, 2024, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2025, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -24,13 +24,10 @@
  */
 
 package jdk.jfr.internal.consumer;
 
 import java.io.IOException;
-import java.security.AccessControlContext;
-import java.security.AccessController;
-import java.security.PrivilegedAction;
 import java.time.Duration;
 import java.time.Instant;
 import java.util.List;
 import java.util.Objects;
 import java.util.concurrent.CountDownLatch;
@@ -44,33 +41,29 @@
 import jdk.jfr.consumer.MetadataEvent;
 import jdk.jfr.consumer.RecordedEvent;
 import jdk.jfr.internal.LogLevel;
 import jdk.jfr.internal.LogTag;
 import jdk.jfr.internal.Logger;
-import jdk.jfr.internal.SecuritySupport;
 
 /*
  * Purpose of this class is to simplify the implementation of
  * an event stream.
  */
 public abstract class AbstractEventStream implements EventStream {
     private static final AtomicLong counter = new AtomicLong();
 
     private final CountDownLatch terminated = new CountDownLatch(1);
     private final Runnable flushOperation = () -> dispatcher().runFlushActions();
-    @SuppressWarnings("removal")
-    private final AccessControlContext accessControllerContext;
     private final StreamConfiguration streamConfiguration = new StreamConfiguration();
     private final List<Configuration> configurations;
     private final ParserState parserState = new ParserState();
     private volatile boolean closeOnComplete = true;
     private Dispatcher dispatcher;
     private boolean daemon = false;
 
 
-    AbstractEventStream(@SuppressWarnings("removal") AccessControlContext acc, List<Configuration> configurations) throws IOException {
-        this.accessControllerContext = Objects.requireNonNull(acc);
+    AbstractEventStream(List<Configuration> configurations) throws IOException {
         this.configurations = configurations;
     }
 
     @Override
     public abstract void start();
@@ -219,26 +212,25 @@
         return parserState;
     }
 
     public final void startAsync(long startNanos) {
         startInternal(startNanos);
-        Runnable r = () -> run(accessControllerContext);
-        Thread thread = SecuritySupport.createThreadWitNoPermissions(nextThreadName(), r);
-        SecuritySupport.setDaemonThread(thread, daemon);
+        Runnable r = () -> execute();
+        Thread thread = new Thread(r, nextThreadName());
+        thread.setDaemon(daemon);
         thread.start();
     }
 
     public final void start(long startNanos) {
         startInternal(startNanos);
-        run(accessControllerContext);
+        execute();
     }
 
     protected final Runnable getFlushOperation() {
         return flushOperation;
     }
 
-
     protected final void onFlush() {
        Runnable r = getFlushOperation();
        if (r != null) {
            r.run();
        }
@@ -274,21 +266,10 @@
                 terminated.countDown();
             }
         }
     }
 
-    @SuppressWarnings("removal")
-    private void run(AccessControlContext accessControlContext) {
-        AccessController.doPrivileged(new PrivilegedAction<Void>() {
-            @Override
-            public Void run() {
-                execute();
-                return null;
-            }
-        }, accessControlContext);
-    }
-
     private String nextThreadName() {
         return "JFR Event Stream " + counter.incrementAndGet();
     }
 
     @Override
