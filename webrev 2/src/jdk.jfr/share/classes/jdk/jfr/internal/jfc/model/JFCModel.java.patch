diff a/src/jdk.jfr/share/classes/jdk/jfr/internal/jfc/model/JFCModel.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/jfc/model/JFCModel.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/jfc/model/JFCModel.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/jfc/model/JFCModel.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2021, 2022, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2021, 2025, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -25,19 +25,19 @@
 package jdk.jfr.internal.jfc.model;
 
 import java.io.IOException;
 import java.io.PrintWriter;
 import java.io.Reader;
+import java.nio.file.Path;
 import java.text.ParseException;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.function.Consumer;
 
-import jdk.jfr.internal.SecuritySupport.SafePath;
 import jdk.jfr.internal.jfc.JFC;
 
 import static java.nio.charset.StandardCharsets.UTF_8;
 
 // Holds the structure of a .jfc file similar to an XML DOM.
@@ -63,11 +63,11 @@
         this.configuration = new XmlConfiguration();
         this.configuration.setAttribute("version", "2.0");
         this.logger = logger;
     }
 
-    public void parse(SafePath file) throws IOException, JFCModelException, ParseException {
+    public void parse(Path file) throws IOException, JFCModelException, ParseException {
         JFCModel model = JFCModel.create(file, logger);
         for (var entry : model.controls.entrySet()) {
             String name = entry.getKey();
             // Fail-fast checks that prevents an ambiguous file to be written later
             if (controls.containsKey(name)) {
@@ -78,11 +78,11 @@
         for (XmlElement child : model.configuration.getChildren()) {
             this.configuration.addChild(child);
         }
     }
 
-    public static JFCModel create(SafePath file, Consumer<String> logger) throws IOException, JFCModelException, ParseException{
+    public static JFCModel create(Path file, Consumer<String> logger) throws IOException, JFCModelException, ParseException{
         if (file.toString().equals("none")) {
             XmlConfiguration configuration = new XmlConfiguration();
             configuration.setAttribute("version", "2.0");
             configuration.setAttribute("label", "None");
             return new JFCModel(configuration);
@@ -152,11 +152,11 @@
             }
         }
         return result;
     }
 
-    public void saveToFile(SafePath path) throws IOException {
+    public void saveToFile(Path path) throws IOException {
         try (PrintWriter p = new PrintWriter(path.toFile(), UTF_8)) {
             PrettyPrinter pp = new PrettyPrinter(p);
             pp.print(configuration);
             if (p.checkError()) {
                 throw new IOException("Error writing " + path);
