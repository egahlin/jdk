diff a/src/jdk.jfr/share/classes/jdk/jfr/internal/periodic/PeriodicTask.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/periodic/PeriodicTask.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/periodic/PeriodicTask.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/periodic/PeriodicTask.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2023, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2023, 2025, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -38,13 +38,10 @@
  *               /          \
  *          EventTask    FlushTask
  *           /     \
  *          /       \
  * JVMEventTask   JavaEventTask
- *                /         \
- *               /           \
- *      UserEventTask     JDKEventTask
  * </pre>
  * <p>
  * State modifications should only be done from the periodic task thread.
  */
 abstract class PeriodicTask {
@@ -125,12 +122,12 @@
             logChunk(periodicType);
         }
         try {
             execute(timestamp, periodicType);
         } catch (Throwable e) {
-            // Prevent malicious user to propagate exception callback in the wrong context
-            Logger.log(LogTag.JFR_SYSTEM, LogLevel.WARN, "Exception occurred during execution of " + name);
+            String msg = "Exception occurred during execution of " + name + ". " + e.getMessage();
+            Logger.log(LogTag.JFR_SYSTEM, LogLevel.WARN, msg);
         }
     }
 
     private void logChunk(PeriodicType periodicType) {
         if (Logger.shouldLog(LogTag.JFR_PERIODIC, LogLevel.DEBUG)) {
