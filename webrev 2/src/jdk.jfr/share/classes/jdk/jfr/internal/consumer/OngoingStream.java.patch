diff a/src/jdk.jfr/share/classes/jdk/jfr/internal/consumer/OngoingStream.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/consumer/OngoingStream.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/consumer/OngoingStream.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/consumer/OngoingStream.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2020, 2024, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2020, 2025, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -24,16 +24,16 @@
  */
 package jdk.jfr.internal.consumer;
 
 import java.io.IOException;
 import java.nio.ByteBuffer;
+import java.nio.file.Files;
 import java.nio.file.Path;
 
 import jdk.jfr.Recording;
 import jdk.jfr.RecordingState;
 import jdk.jfr.internal.SecuritySupport;
-import jdk.jfr.internal.SecuritySupport.SafePath;
 import jdk.jfr.internal.management.EventByteStream;
 import jdk.jfr.internal.management.HiddenWait;
 import jdk.jfr.internal.management.ManagementSupport;
 
 public final class OngoingStream extends EventByteStream {
@@ -61,11 +61,11 @@
         super();
         this.recording = recording;
         this.blockSize = blockSize;
         this.startTimeNanos = startTimeNanos;
         this.endTimeNanos = endTimeNanos;
-        this.repositoryFiles = new RepositoryFiles(SecuritySupport.PRIVILEGED, null, false);
+        this.repositoryFiles = new RepositoryFiles(null, false);
     }
 
     @Override
     public synchronized byte[] read() throws IOException {
         try {
@@ -204,14 +204,14 @@
         return EMPTY_ARRAY;
     }
 
     private boolean ensureInput() throws IOException {
         if (input == null) {
-            if (SecuritySupport.getFileSize(new SafePath(path)) < HEADER_SIZE) {
+            if (Files.size(path) < HEADER_SIZE) {
                 return false;
             }
-            input = new RecordingInput(path.toFile(), SecuritySupport.PRIVILEGED);
+            input = new RecordingInput(path.toFile());
             input.setStreamed();
             header = new ChunkHeader(input);
         }
         return true;
     }
