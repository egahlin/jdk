diff a/src/jdk.jfr/share/classes/jdk/jfr/internal/periodic/PeriodicEvents.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/periodic/PeriodicEvents.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/periodic/PeriodicEvents.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/periodic/PeriodicEvents.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2016, 2023, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2025, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -22,11 +22,10 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package jdk.jfr.internal.periodic;
 
-import java.security.AccessControlContext;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.atomic.AtomicLong;
 
 import jdk.internal.event.Event;
@@ -56,22 +55,18 @@
     private static final AtomicLong settingsIteration = new AtomicLong();
 
     // State only to be read and modified by periodic task thread
     private static long lastTimeMillis;
 
-    public static void addJDKEvent(Class<? extends Event> eventClass, Runnable runnable) {
-        taskRepository.add(new JDKEventTask(eventClass, runnable));
+    public static void addJavaEvent(Class<? extends Event> eventClass, Runnable runnable) {
+        taskRepository.add(new JavaEventTask(eventClass, runnable));
     }
 
     public static void addJVMEvent(PlatformEventType eventType) {
         taskRepository.add(new JVMEventTask(eventType));
     }
 
-    public static void addUserEvent(@SuppressWarnings("removal") AccessControlContext acc, Class<? extends Event> eventClass, Runnable runnable) {
-        taskRepository.add(new UserEventTask(acc, eventClass, runnable));
-    }
-
     public static boolean removeEvent(Runnable runnable) {
         return taskRepository.removeTask(runnable);
     }
 
     public static void doChunkBegin() {
