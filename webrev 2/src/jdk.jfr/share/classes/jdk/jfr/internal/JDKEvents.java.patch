diff a/src/jdk.jfr/share/classes/jdk/jfr/internal/JDKEvents.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/JDKEvents.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/JDKEvents.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/JDKEvents.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2016, 2024, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2025, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -89,15 +89,15 @@
     @SuppressWarnings("unchecked")
     public static synchronized void initialize() {
         try {
             if (initializationTriggered == false) {
                 for (Class<?> eventClass : eventClasses) {
-                    SecuritySupport.registerEvent((Class<? extends Event>) eventClass);
+                    MetadataRepository.getInstance().register((Class<? extends Event>) eventClass);
                 }
-                PeriodicEvents.addJDKEvent(jdk.internal.event.ExceptionStatisticsEvent.class, emitExceptionStatistics);
-                PeriodicEvents.addJDKEvent(DirectBufferStatisticsEvent.class, emitDirectBufferStatistics);
-                PeriodicEvents.addJDKEvent(InitialSecurityPropertyEvent.class, emitInitialSecurityProperties);
+                PeriodicEvents.addJavaEvent(jdk.internal.event.ExceptionStatisticsEvent.class, emitExceptionStatistics);
+                PeriodicEvents.addJavaEvent(DirectBufferStatisticsEvent.class, emitDirectBufferStatistics);
+                PeriodicEvents.addJavaEvent(InitialSecurityPropertyEvent.class, emitInitialSecurityProperties);
 
                 initializeContainerEvents();
                 JFRTracing.enable();
                 initializationTriggered = true;
             }
@@ -114,21 +114,25 @@
                 Logger.log(LogTag.JFR_SYSTEM, LogLevel.DEBUG, "Container metrics are available");
             }
         }
         // The registration of events and hooks are needed to provide metadata,
         // even when not running in a container
-        SecuritySupport.registerEvent(ContainerConfigurationEvent.class);
-        SecuritySupport.registerEvent(ContainerCPUUsageEvent.class);
-        SecuritySupport.registerEvent(ContainerCPUThrottlingEvent.class);
-        SecuritySupport.registerEvent(ContainerMemoryUsageEvent.class);
-        SecuritySupport.registerEvent(ContainerIOUsageEvent.class);
+        registerEvent(ContainerConfigurationEvent.class);
+        registerEvent(ContainerCPUUsageEvent.class);
+        registerEvent(ContainerCPUThrottlingEvent.class);
+        registerEvent(ContainerMemoryUsageEvent.class);
+        registerEvent(ContainerIOUsageEvent.class);
 
-        PeriodicEvents.addJDKEvent(ContainerConfigurationEvent.class, emitContainerConfiguration);
-        PeriodicEvents.addJDKEvent(ContainerCPUUsageEvent.class, emitContainerCPUUsage);
-        PeriodicEvents.addJDKEvent(ContainerCPUThrottlingEvent.class, emitContainerCPUThrottling);
-        PeriodicEvents.addJDKEvent(ContainerMemoryUsageEvent.class, emitContainerMemoryUsage);
-        PeriodicEvents.addJDKEvent(ContainerIOUsageEvent.class, emitContainerIOUsage);
+        PeriodicEvents.addJavaEvent(ContainerConfigurationEvent.class, emitContainerConfiguration);
+        PeriodicEvents.addJavaEvent(ContainerCPUUsageEvent.class, emitContainerCPUUsage);
+        PeriodicEvents.addJavaEvent(ContainerCPUThrottlingEvent.class, emitContainerCPUThrottling);
+        PeriodicEvents.addJavaEvent(ContainerMemoryUsageEvent.class, emitContainerMemoryUsage);
+        PeriodicEvents.addJavaEvent(ContainerIOUsageEvent.class, emitContainerIOUsage);
+    }
+
+    private static void registerEvent(Class<? extends jdk.internal.event.Event> eventClass) {
+        MetadataRepository.getInstance().register(eventClass);
     }
 
     private static void emitExceptionStatistics() {
         ThrowableTracer.emitStatistics();
     }
