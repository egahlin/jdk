diff a/src/jdk.jfr/share/classes/jdk/jfr/internal/periodic/JavaEventTask.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/periodic/JavaEventTask.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/periodic/JavaEventTask.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/periodic/JavaEventTask.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2023, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2023, 2025, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -28,13 +28,13 @@
 import jdk.jfr.EventType;
 import jdk.jfr.internal.MetadataRepository;
 import jdk.jfr.internal.PlatformEventType;
 import jdk.jfr.internal.PrivateAccess;
 /**
- * Base class for periodic Java events.
+ * Class for periodic Java events.
  */
-abstract class JavaEventTask extends EventTask {
+final class JavaEventTask extends EventTask {
     private final Runnable runnable;
 
     public JavaEventTask(Class<? extends Event> eventClass, Runnable runnable) {
         super(toPlatformEventType(eventClass), new LookupKey(runnable));
         this.runnable = runnable;
@@ -46,9 +46,10 @@
     private static PlatformEventType toPlatformEventType(Class<? extends Event> eventClass) {
         EventType eventType = MetadataRepository.getInstance().getEventType(eventClass);
         return PrivateAccess.getInstance().getPlatformEventType(eventType);
     }
 
-    protected final Runnable getRunnable() {
-        return runnable;
+    @Override
+    public void execute(long timestamp, PeriodicType periodicType) {
+        runnable.run();
     }
 }
