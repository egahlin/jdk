diff a/src/jdk.jfr/share/classes/jdk/jfr/internal/dcmd/DCmdStop.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/dcmd/DCmdStop.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/dcmd/DCmdStop.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/dcmd/DCmdStop.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2012, 2024, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2025, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -24,16 +24,16 @@
  */
 package jdk.jfr.internal.dcmd;
 
 import java.io.IOException;
 import java.nio.file.InvalidPathException;
+import java.nio.file.Path;
 import java.nio.file.Paths;
 
 import jdk.jfr.Recording;
 import jdk.jfr.internal.PrivateAccess;
-import jdk.jfr.internal.SecuritySupport.SafePath;
-import jdk.jfr.internal.WriteableUserPath;
+import jdk.jfr.internal.WriteablePath;
 
 /**
  * JFR.stop
  *
  */
@@ -45,24 +45,24 @@
         parser.checkUnknownArguments();
         String name = parser.getOption("name");
         String filename = parser.getOption("filename");
         try {
             Recording recording = findRecording(name);
-            WriteableUserPath path = PrivateAccess.getInstance().getPlatformRecording(recording).getDestination();
-            SafePath safePath = path == null ? null : new SafePath(path.getRealPathText());
+            WriteablePath wp = PrivateAccess.getInstance().getPlatformRecording(recording).getDestination();
+            Path path = wp == null ? null : wp.getReal();
             if (filename != null) {
                 try {
-                    // Ensure path is valid. Don't generate safePath if filename == null, as a user may
+                    // Ensure path is valid. Don't generate path if filename == null, as a user may
                     // want to stop recording without a dump
-                    safePath = resolvePath(null, filename);
+                    path = resolvePath(null, filename);
                     recording.setDestination(Paths.get(filename));
                 } catch (IOException | InvalidPathException  e) {
                     throw new DCmdException("Failed to stop %s. Could not set destination for \"%s\" to file %s", recording.getName(), filename, e.getMessage());
                 }
             }
             recording.stop();
-            reportOperationComplete("Stopped", recording.getName(), safePath);
+            reportOperationComplete("Stopped", recording.getName(), path);
             recording.close();
         } catch (InvalidPathException | DCmdException e) {
             if (filename != null) {
                 throw new DCmdException("Could not write recording \"%s\" to file. %s", name, e.getMessage());
             }
