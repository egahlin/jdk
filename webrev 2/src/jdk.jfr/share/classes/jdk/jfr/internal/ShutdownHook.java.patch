diff a/src/jdk.jfr/share/classes/jdk/jfr/internal/ShutdownHook.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/ShutdownHook.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/ShutdownHook.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/ShutdownHook.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2016, 2024, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2025, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -23,26 +23,22 @@
  * questions.
  */
 
 package jdk.jfr.internal;
 
-import java.security.AccessControlContext;
-import java.security.AccessController;
-import java.security.PrivilegedActionException;
-import java.security.PrivilegedExceptionAction;
-
 import jdk.jfr.RecordingState;
 
 /**
  * Class responsible for dumping recordings on exit
  *
  */
-final class ShutdownHook implements Runnable {
+final class ShutdownHook extends Thread {
     private final PlatformRecorder recorder;
     Object tlabDummyObject;
 
     ShutdownHook(PlatformRecorder recorder) {
+        super("JFR Shutdown Hook");
         this.recorder = recorder;
     }
 
     @Override
     public void run() {
@@ -59,11 +55,11 @@
         recorder.destroy();
     }
 
     private void dump(PlatformRecording recording) {
         try {
-            WriteableUserPath dest = recording.getDestination();
+            WriteablePath dest = recording.getDestination();
             if (dest == null) {
                 dest = recording.makeDumpPath();
                 recording.setDestination(dest);
             }
             if (dest != null) {
