diff a/src/jdk.jfr/share/classes/jdk/jfr/internal/Options.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/Options.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/Options.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/Options.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2016, 2023, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2025, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -24,12 +24,13 @@
  */
 
 package jdk.jfr.internal;
 
 import java.io.IOException;
+import java.nio.file.Files;
+import java.nio.file.Path;
 
-import jdk.jfr.internal.SecuritySupport.SafePath;
 import jdk.internal.misc.Unsafe;
 
 import static java.nio.file.LinkOption.*;
 
 /**
@@ -48,11 +49,11 @@
     private static final long DEFAULT_GLOBAL_BUFFER_SIZE = 524288;
     private static final long DEFAULT_MEMORY_SIZE = DEFAULT_GLOBAL_BUFFER_COUNT * DEFAULT_GLOBAL_BUFFER_SIZE;
     private static long DEFAULT_THREAD_BUFFER_SIZE;
     private static final int DEFAULT_STACK_DEPTH = 64;
     private static final long DEFAULT_MAX_CHUNK_SIZE = 12 * 1024 * 1024;
-    private static final SafePath DEFAULT_DUMP_PATH = null;
+    private static final Path DEFAULT_DUMP_PATH = null;
     private static final boolean DEFAULT_PRESERVE_REPOSITORY = false;
 
     private static long memorySize;
     private static long globalBufferSize;
     private static long globalBufferCount;
@@ -113,23 +114,23 @@
     public static synchronized void setGlobalBufferSize(long globalBufsize) {
         JVM.setGlobalBufferSize(globalBufsize);
         globalBufferSize = globalBufsize;
     }
 
-    public static synchronized void setDumpPath(SafePath path) throws IOException {
+    public static synchronized void setDumpPath(Path path) throws IOException {
         if (path != null) {
-            if (SecuritySupport.isWritable(path)) {
-                path = SecuritySupport.toRealPath(path, NOFOLLOW_LINKS);
+            if (Files.isWritable(path)) {
+                path = path.toRealPath(NOFOLLOW_LINKS);
             } else {
                 throw new IOException("Cannot write JFR emergency dump to " + path.toString());
             }
         }
         JVM.setDumpPath(path == null ? null : path.toString());
     }
 
-    public static synchronized SafePath getDumpPath() {
-        return new SafePath(JVM.getDumpPath());
+    public static synchronized Path getDumpPath() {
+        return Path.of(JVM.getDumpPath());
     }
 
     public static synchronized void setStackDepth(Integer stackTraceDepth) {
         JVM.setStackDepth(stackTraceDepth);
         stackDepth = stackTraceDepth;
