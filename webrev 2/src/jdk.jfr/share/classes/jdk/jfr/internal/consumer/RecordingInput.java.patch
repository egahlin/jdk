diff a/src/jdk.jfr/share/classes/jdk/jfr/internal/consumer/RecordingInput.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/consumer/RecordingInput.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/consumer/RecordingInput.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/consumer/RecordingInput.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2016, 2024, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2025, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -31,11 +31,10 @@
 import java.io.IOException;
 import java.io.RandomAccessFile;
 import java.nio.file.Path;
 
 import jdk.jfr.internal.management.HiddenWait;
-import jdk.jfr.internal.util.Utils;
 
 public final class RecordingInput implements DataInput, AutoCloseable {
 
     private static final int DEFAULT_BLOCK_SIZE = 64_000;
 
@@ -66,41 +65,39 @@
             blockPosition = 0;
             blockPositionEnd = 0;
         }
     }
     private final int blockSize;
-    private final FileAccess fileAccess;
     private final HiddenWait threadSleeper = new HiddenWait();
     private long pollCount = 1000;
     private RandomAccessFile file;
     private String filename;
     private Block currentBlock = new Block();
     private Block previousBlock = new Block();
     private long position;
     private long size = -1; // Fail fast if setSize(...) has not been called
                             // before parsing
 
-    RecordingInput(File f, FileAccess fileAccess, int blockSize) throws IOException {
+    RecordingInput(File f, int blockSize) throws IOException {
         this.blockSize = blockSize;
-        this.fileAccess = fileAccess;
         initialize(f);
     }
 
     private void initialize(File f) throws IOException {
-        this.filename = fileAccess.getAbsolutePath(f);
-        this.file = fileAccess.openRAF(f, "r");
+        this.filename = f.getAbsolutePath();
+        this.file = new RandomAccessFile(f, "r");
         this.position = 0;
         this.size = -1;
         this.currentBlock.reset();
         previousBlock.reset();
-        if (fileAccess.length(f) < 8) {
-            throw new IOException("Not a valid Flight Recorder file. File length is only " + fileAccess.length(f) + " bytes.");
+        if (f.length() < 8) {
+            throw new IOException("Not a valid Flight Recorder file. File length is only " + f.length() + " bytes.");
         }
     }
 
-    public RecordingInput(File f, FileAccess fileAccess) throws IOException {
-        this(f, fileAccess, DEFAULT_BLOCK_SIZE);
+    public RecordingInput(File f) throws IOException {
+        this(f, DEFAULT_BLOCK_SIZE);
     }
 
     void positionPhysical(long position) throws IOException {
         file.seek(position);
     }
