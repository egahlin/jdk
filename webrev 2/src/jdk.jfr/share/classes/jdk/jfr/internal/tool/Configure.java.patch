diff a/src/jdk.jfr/share/classes/jdk/jfr/internal/tool/Configure.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/tool/Configure.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/tool/Configure.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/tool/Configure.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2021, 2023, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2021, 2025, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -36,11 +36,10 @@
 import java.util.Deque;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 
-import jdk.jfr.internal.SecuritySupport.SafePath;
 import jdk.jfr.internal.jfc.JFC;
 import jdk.jfr.internal.jfc.model.AbortException;
 import jdk.jfr.internal.jfc.model.JFCModel;
 import jdk.jfr.internal.jfc.model.JFCModelException;
 import jdk.jfr.internal.jfc.model.SettingsLog;
@@ -127,11 +126,11 @@
     private void displayParameters(PrintStream stream, String name) {
         stream.println();
         stream.println("Options for " + name + ":");
         stream.println();
         try {
-            SafePath path = JFC.createSafePath(name);
+            Path path = JFC.ofPath(name);
             JFCModel parameters = JFCModel.create(path, l -> stream.println("Warning! " + l));
             for (XmlInput input : parameters.getInputs()) {
                 stream.println("  " + input.getOptionSyntax());
                 stream.println();
             }
@@ -142,11 +141,11 @@
 
     @Override
     public void execute(Deque<String> options) throws UserSyntaxException, UserDataException {
         boolean interactive = false;
         boolean log = false;
-        SafePath output = null;
+        Path output = null;
         Map<String, String> keyValues = new LinkedHashMap<>();
         int optionCount = options.size();
         while (optionCount > 0) {
             if (acceptSwitch(options, "--interactive")) {
                 interactive = true;
@@ -190,27 +189,27 @@
             return index > 0 && index < keyValue.length() - 1;
         }
         return false;
     }
 
-    private void configure(boolean interactive, boolean log, SafePath output, Map<String, String> options) throws UserDataException {
+    private void configure(boolean interactive, boolean log, Path output, Map<String, String> options) throws UserDataException {
         UserInterface ui = new UserInterface();
         if (log) {
             SettingsLog.enable();
         }
         JFCModel model = new JFCModel(l -> ui.println("Warning! " + l));
         model.setLabel("Custom");
         for (String input : inputFiles) {
             try {
-                model.parse(JFC.createSafePath(input));
+                model.parse(JFC.ofPath(input));
             } catch (InvalidPathException | IOException | JFCModelException | ParseException e) {
                 throw new UserDataException(JFC.formatException("could not", e, input));
             }
         }
         try {
             if (output == null) {
-                output = new SafePath(Path.of("custom.jfc"));
+                output = Path.of("custom.jfc");
             }
             for (var option : options.entrySet()) {
                 model.configure(option.getKey(), option.getValue());
             }
             SettingsLog.flush();
@@ -228,11 +227,11 @@
                 ui.println("Abort.");
                 return;
             }
             model.saveToFile(output);
             ui.println("Configuration written successfully to:");
-            ui.println(output.toPath().toAbsolutePath().toString());
+            ui.println(output.toAbsolutePath().toString());
         } catch (IllegalArgumentException iae) {
             throw new UserDataException(iae.getMessage());
         } catch (FileNotFoundException ffe) {
             throw new UserDataException("could not find file: " + ffe.getMessage());
         } catch (IOException ioe) {
@@ -244,37 +243,37 @@
         if (inputFiles.isEmpty()) {
             inputFiles.add("default.jfc");
         }
     }
 
-    private static SafePath filename(UserInterface ui, SafePath file) throws AbortException {
+    private static Path filename(UserInterface ui, Path file) throws AbortException {
         ui.println();
         ui.println("Filename: " + file + " (default)");
         while (true) {
             String line = ui.readLine();
             try {
                 if (line.isBlank()) {
                     return file;
                 }
                 if (line.endsWith(".jfc")) {
-                    return new SafePath(line);
+                    return Path.of(line);
                 }
                 ui.println("Filename must end with .jfc.");
             } catch (InvalidPathException ipe) {
                 ui.println("Not a valid filename. " + ipe.getMessage());
             }
         }
     }
 
-    private SafePath makeJFCPath(String file) throws UserDataException, UserSyntaxException {
+    private Path makeJFCPath(String file) throws UserDataException, UserSyntaxException {
         if (file.startsWith("--")) {
             throw new UserSyntaxException("missing file");
         }
         try {
             Path path = Path.of(file).toAbsolutePath();
             ensureFileExtension(path, ".jfc");
-            return new SafePath(path);
+            return path;
         } catch (IOError ioe) {
             throw new UserDataException("i/o error reading file '" + file + "', " + ioe.getMessage());
         } catch (InvalidPathException ipe) {
             throw new UserDataException("invalid path '" + file + "'");
         }
