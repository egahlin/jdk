diff a/src/jdk.jfr/share/classes/jdk/jfr/consumer/EventStream.java b/src/jdk.jfr/share/classes/jdk/jfr/consumer/EventStream.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/consumer/EventStream.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/consumer/EventStream.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2019, 2024, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2025, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -25,22 +25,18 @@
 
 package jdk.jfr.consumer;
 
 import java.io.IOException;
 import java.nio.file.Path;
-import java.security.AccessControlContext;
-import java.security.AccessController;
 import java.time.Duration;
 import java.time.Instant;
 import java.util.Collections;
 import java.util.Objects;
 import java.util.function.Consumer;
 
-import jdk.jfr.internal.SecuritySupport;
 import jdk.jfr.internal.consumer.EventDirectoryStream;
 import jdk.jfr.internal.consumer.EventFileStream;
-import jdk.jfr.internal.consumer.FileAccess;
 
 /**
  * Represents a stream of events.
  * <p>
  * A stream is a sequence of events and the way to interact with a stream is to
@@ -111,17 +107,13 @@
      * @return an event stream, not {@code null}
      *
      * @throws IOException if a stream can't be opened, or an I/O error occurs
      *         when trying to access the repository
      */
-    @SuppressWarnings("removal")
     public static EventStream openRepository() throws IOException {
-        SecuritySupport.checkAccessFlightRecorder();
         return new EventDirectoryStream(
-            AccessController.getContext(),
             null,
-            SecuritySupport.PRIVILEGED,
             null,
             Collections.emptyList(),
             false
         );
     }
@@ -141,16 +133,12 @@
      * @throws IOException if a stream can't be opened, or an I/O error occurs
      *         when trying to access the repository
      */
     public static EventStream openRepository(Path directory) throws IOException {
         Objects.requireNonNull(directory, "directory");
-        @SuppressWarnings("removal")
-        AccessControlContext acc = AccessController.getContext();
         return new EventDirectoryStream(
-            acc,
             directory,
-            FileAccess.UNPRIVILEGED,
             null,
             Collections.emptyList(),
             true
         );
     }
@@ -167,14 +155,13 @@
      * @return an event stream, not {@code null}
      *
      * @throws IOException if the file can't be opened, or an I/O error occurs
      *         during reading
      */
-    @SuppressWarnings("removal")
     static EventStream openFile(Path file) throws IOException {
         Objects.requireNonNull(file, "file");
-        return new EventFileStream(AccessController.getContext(), file);
+        return new EventFileStream(file);
     }
 
     /**
      * Registers an action to perform when new metadata arrives in the stream.
      *
