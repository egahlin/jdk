diff a/src/jdk.jfr/share/classes/jdk/jfr/FlightRecorderPermission.java b/src/jdk.jfr/share/classes/jdk/jfr/FlightRecorderPermission.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/FlightRecorderPermission.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/FlightRecorderPermission.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2016, 2024, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2025, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -23,20 +23,18 @@
  * questions.
  */
 
 package jdk.jfr;
 
-import java.security.AccessControlContext;
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
 
 import jdk.jfr.internal.PlatformEventType;
 import jdk.jfr.internal.PlatformRecorder;
 import jdk.jfr.internal.PlatformRecording;
 import jdk.jfr.internal.PrivateAccess;
-import jdk.jfr.internal.SecuritySupport;
 import jdk.jfr.internal.Type;
 import jdk.jfr.internal.management.EventSettingsModifier;
 
 /**
  * Permission for controlling access to Flight Recorder.
@@ -154,16 +152,10 @@
         @Override
         public PlatformRecorder getPlatformRecorder() {
             return FlightRecorder.getFlightRecorder().getInternal();
         }
 
-        @SuppressWarnings("removal")
-        @Override
-        public AccessControlContext getContext(SettingControl settingControl) {
-            return settingControl.getContext();
-        }
-
         @Override
         public EventSettings newEventSettings(EventSettingsModifier esm) {
             return new EventSettings.DelegatedEventSettings(esm);
         }
 
@@ -182,10 +174,10 @@
      *
      * @throws IllegalArgumentException if {@code name} is empty or not valid
      */
     public FlightRecorderPermission(String name) {
         super(Objects.requireNonNull(name, "name"));
-        if (!name.equals(SecuritySupport.ACCESS_FLIGHT_RECORDER) && !name.equals(SecuritySupport.REGISTER_EVENT)) {
+        if (!name.equals("accessFlightRecorder") && !name.equals("registerEvent")) {
             throw new IllegalArgumentException("name: " + name);
         }
     }
 }
