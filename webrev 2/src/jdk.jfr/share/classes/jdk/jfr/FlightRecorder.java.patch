diff a/src/jdk.jfr/share/classes/jdk/jfr/FlightRecorder.java b/src/jdk.jfr/share/classes/jdk/jfr/FlightRecorder.java
--- a/src/jdk.jfr/share/classes/jdk/jfr/FlightRecorder.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/FlightRecorder.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2016, 2024, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2025, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -27,12 +27,10 @@
 
 import static jdk.jfr.internal.LogLevel.DEBUG;
 import static jdk.jfr.internal.LogLevel.INFO;
 import static jdk.jfr.internal.LogTag.JFR;
 
-import java.security.AccessControlContext;
-import java.security.AccessController;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 import java.util.Objects;
 
@@ -42,11 +40,10 @@
 import jdk.jfr.internal.MetadataRepository;
 import jdk.jfr.internal.Options;
 import jdk.jfr.internal.PlatformRecorder;
 import jdk.jfr.internal.PlatformRecording;
 import jdk.jfr.internal.Repository;
-import jdk.jfr.internal.SecuritySupport;
 import jdk.jfr.internal.util.Utils;
 import jdk.jfr.internal.periodic.PeriodicEvents;
 
 /**
  * Class for accessing, controlling, and managing Flight Recorder.
@@ -155,11 +152,10 @@
      *         example, if the Java Virtual Machine (JVM) lacks Flight Recorder
      *         support, or if the file repository can't be created or accessed)
      */
     public static FlightRecorder getFlightRecorder() throws IllegalStateException {
         synchronized (PlatformRecorder.class) {
-            SecuritySupport.checkAccessFlightRecorder();
             JVMSupport.ensureWithIllegalStateException();
             if (platformRecorder == null) {
                 try {
                     platformRecorder = new FlightRecorder(new PlatformRecorder());
                 } catch (IllegalStateException ise) {
@@ -211,25 +207,21 @@
         if (JVMSupport.isNotAvailable()) {
             return;
         }
 
         Utils.ensureValidEventSubclass(eventClass);
-        SecuritySupport.checkRegisterPermission();
-        @SuppressWarnings("removal")
-        AccessControlContext acc = AccessController.getContext();
-        PeriodicEvents.addUserEvent(acc, eventClass, hook);
+        PeriodicEvents.addJavaEvent(eventClass, hook);
     }
 
     /**
      * Removes a hook for a periodic event.
      *
      * @param hook the hook to remove, not {@code null}
      * @return {@code true} if hook is removed, {@code false} otherwise
      */
     public static boolean removePeriodicEvent(Runnable hook) {
         Objects.requireNonNull(hook, "hook");
-        SecuritySupport.checkRegisterPermission();
         if (JVMSupport.isNotAvailable()) {
             return false;
         }
         return PeriodicEvents.removeEvent(hook);
     }
@@ -247,22 +239,20 @@
     public List<EventType> getEventTypes() {
         return Collections.unmodifiableList(MetadataRepository.getInstance().getRegisteredEventTypes());
     }
 
     /**
-     * Adds a recorder listener and captures the {@code AccessControlContext} to
-     * use when invoking the listener.
+     * Adds a recorder listener.
      * <p>
      * If Flight Recorder is already initialized when the listener is added, then the method
      * {@link FlightRecorderListener#recorderInitialized(FlightRecorder)} method is
      * invoked before returning from this method.
      *
      * @param changeListener the listener to add, not {@code null}
      */
     public static void addListener(FlightRecorderListener changeListener) {
         Objects.requireNonNull(changeListener, "changeListener");
-        SecuritySupport.checkAccessFlightRecorder();
         if (JVMSupport.isNotAvailable()) {
             return;
         }
         PlatformRecorder.addListener(changeListener);
     }
@@ -278,11 +268,10 @@
      * @return {@code true}, if the listener could be removed, {@code false}
      *         otherwise
      */
     public static boolean removeListener(FlightRecorderListener changeListener) {
         Objects.requireNonNull(changeListener, "changeListener");
-        SecuritySupport.checkAccessFlightRecorder();
         if (JVMSupport.isNotAvailable()) {
             return false;
         }
 
         return PlatformRecorder.removeListener(changeListener);
