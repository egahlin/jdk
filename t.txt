diff --git a/src/java.base/share/classes/java/io/FileInputStream.java b/src/java.base/share/classes/java/io/FileInputStream.java
index aec65343384..f112691ebc7 100644
--- a/src/java.base/share/classes/java/io/FileInputStream.java
+++ b/src/java.base/share/classes/java/io/FileInputStream.java
@@ -205,24 +205,18 @@ public int read() throws IOException {
 
     private int traceRead0() throws IOException {
         int result = 0;
-        boolean endOfFile = false;
         long bytesRead = 0;
         long start = 0;
         try {
             start = FileReadEvent.timestamp();
             result = read0();
             if (result < 0) {
-                endOfFile = true;
+                bytesRead = -1;
             } else {
                 bytesRead = 1;
             }
         } finally {
-            long end = FileReadEvent.timestamp();
-            long duration = end - start;
-            if (FileReadEvent.shouldThrottleCommit(duration, end)) {
-                FileReadEvent.commit(start, duration, path, bytesRead, endOfFile);
-            }
-
+            FileReadEvent.offer(start, path, bytesRead);
         }
         return result;
     }
@@ -243,15 +237,7 @@ private int traceReadBytes(byte b[], int off, int len) throws IOException {
             start = FileReadEvent.timestamp();
             bytesRead = readBytes(b, off, len);
         } finally {
-            long end = FileReadEvent.timestamp();
-            long duration = end - start;
-            if (FileReadEvent.shouldThrottleCommit(duration, end)) {
-                if (bytesRead < 0) {
-                    FileReadEvent.commit(start, duration, path, 0L, true);
-                } else {
-                    FileReadEvent.commit(start, duration, path, bytesRead, false);
-                }
-            }
+            FileReadEvent.offer(start, path, bytesRead);
         }
         return bytesRead;
     }
diff --git a/src/java.base/share/classes/java/io/FileOutputStream.java b/src/java.base/share/classes/java/io/FileOutputStream.java
index ebedce2b73e..f44eaee13b1 100644
--- a/src/java.base/share/classes/java/io/FileOutputStream.java
+++ b/src/java.base/share/classes/java/io/FileOutputStream.java
@@ -272,11 +272,7 @@ private void traceWrite(int b, boolean append) throws IOException {
             write(b, append);
             bytesWritten = 1;
         } finally {
-            long end = FileWriteEvent.timestamp();
-            long duration = end - start;
-            if (FileWriteEvent.shouldThrottleCommit(duration, end)) {
-                FileWriteEvent.commit(start, duration, path, bytesWritten);
-            }
+            FileWriteEvent.offer(start, path, bytesWritten);
         }
     }
 
@@ -317,11 +313,7 @@ private void traceWriteBytes(byte b[], int off, int len, boolean append) throws
             writeBytes(b, off, len, append);
             bytesWritten = len;
         } finally {
-            long end = FileWriteEvent.timestamp();
-            long duration = end - start;
-            if (FileWriteEvent.shouldThrottleCommit(duration, end)) {
-                FileWriteEvent.commit(start, duration, path, bytesWritten);
-            }
+            FileWriteEvent.offer(start, path, bytesWritten);
         }
     }
 
diff --git a/src/java.base/share/classes/java/io/RandomAccessFile.java b/src/java.base/share/classes/java/io/RandomAccessFile.java
index 9200022582b..f3a20634d61 100644
--- a/src/java.base/share/classes/java/io/RandomAccessFile.java
+++ b/src/java.base/share/classes/java/io/RandomAccessFile.java
@@ -367,22 +367,17 @@ public int read() throws IOException {
     private int traceRead0() throws IOException {
         int result = 0;
         long bytesRead = 0;
-        boolean endOfFile = false;
         long start = 0;
         try {
             start = FileReadEvent.timestamp();
             result = read0();
             if (result < 0) {
-                endOfFile = true;
+                bytesRead = -1;
             } else {
                 bytesRead = 1;
             }
         } finally {
-            long end = FileReadEvent.timestamp();
-            long duration = end - start;
-            if (FileReadEvent.shouldThrottleCommit(duration, end)) {
-                FileReadEvent.commit(start, duration, path, bytesRead, endOfFile);
-            }
+            FileReadEvent.offer(start, path, bytesRead);
         }
         return result;
     }
@@ -410,15 +405,7 @@ private int traceReadBytes0(byte b[], int off, int len) throws IOException {
             start = FileReadEvent.timestamp();
             bytesRead = readBytes0(b, off, len);
         } finally {
-            long end = FileReadEvent.timestamp();
-            long duration = end - start;
-            if (FileReadEvent.shouldThrottleCommit(duration, end)) {
-                if (bytesRead < 0) {
-                    FileReadEvent.commit(start, duration, path, 0L, true);
-                } else {
-                    FileReadEvent.commit(start, duration, path, bytesRead, false);
-                }
-            }
+            FileReadEvent.offer(start, path, bytesRead);
         }
         return bytesRead;
     }
@@ -590,11 +577,7 @@ private void traceImplWrite(int b) throws IOException {
             implWrite(b);
             bytesWritten = 1;
         } finally {
-            long end = FileWriteEvent.timestamp();
-            long duration =  end - start;
-            if (FileWriteEvent.shouldThrottleCommit(duration, end)) {
-                FileWriteEvent.commit(start, duration, path, bytesWritten);
-            }
+            FileWriteEvent.offer(start, path, bytesWritten);
         }
     }
 
@@ -633,11 +616,7 @@ private void traceImplWriteBytes(byte b[], int off, int len) throws IOException
             implWriteBytes(b, off, len);
             bytesWritten = len;
         } finally {
-            long end = FileWriteEvent.timestamp();
-            long duration = end - start;
-            if (FileWriteEvent.shouldThrottleCommit(duration, end)) {
-                FileWriteEvent.commit(start, duration, path, bytesWritten);
-            }
+            FileWriteEvent.offer(start, path, bytesWritten);
         }
     }
 
diff --git a/src/java.base/share/classes/java/net/Socket.java b/src/java.base/share/classes/java/net/Socket.java
index 7bd81f361fd..2905a51b402 100644
--- a/src/java.base/share/classes/java/net/Socket.java
+++ b/src/java.base/share/classes/java/net/Socket.java
@@ -965,11 +965,7 @@ public int read(byte[] b, int off, int len) throws IOException {
             }
             long start = SocketReadEvent.timestamp();
             int nbytes = implRead(b, off, len);
-            long end = SocketReadEvent.timestamp();
-            long duration = end - start;
-            if (SocketReadEvent.shouldThrottleCommit(duration, end)) {
-                SocketReadEvent.emit(start, duration, nbytes, parent.getRemoteSocketAddress(), getSoTimeout());
-            }
+            SocketReadEvent.offer(start, nbytes, parent.getRemoteSocketAddress(), getSoTimeout());
             return nbytes;
         }
 
@@ -1082,11 +1078,7 @@ public void write(byte[] b, int off, int len) throws IOException {
             }
             long start = SocketWriteEvent.timestamp();
             implWrite(b, off, len);
-            long end = SocketWriteEvent.timestamp();
-            long duration = end - start;
-            if (SocketWriteEvent.shouldThrottleCommit(duration, end)) {
-                SocketWriteEvent.emit(start, duration, len, parent.getRemoteSocketAddress());
-            }
+            SocketWriteEvent.offer(start, len, parent.getRemoteSocketAddress());
         }
 
         private void implWrite(byte[] b, int off, int len) throws IOException {
diff --git a/src/java.base/share/classes/jdk/internal/event/FileForceEvent.java b/src/java.base/share/classes/jdk/internal/event/FileForceEvent.java
index f6dec6c8a5e..fe7c351ca53 100644
--- a/src/java.base/share/classes/jdk/internal/event/FileForceEvent.java
+++ b/src/java.base/share/classes/jdk/internal/event/FileForceEvent.java
@@ -43,7 +43,7 @@ public class FileForceEvent extends Event {
     /**
      * Helper method to offer the data needed to potentially commit an event.
      * The duration of the operation is computed using the current
-     * timestamp and the given start time.  If the duration is meets
+     * timestamp and the given start time. If the duration is meets
      * or exceeds the configured value (determined by calling the generated method
      * {@link #shouldCommit(long)}), an event will be emitted by calling
      * {@link #commit(long, long, String, boolean)}.
diff --git a/src/java.base/share/classes/jdk/internal/event/FileReadEvent.java b/src/java.base/share/classes/jdk/internal/event/FileReadEvent.java
index 741897d8374..eb711687cc4 100644
--- a/src/java.base/share/classes/jdk/internal/event/FileReadEvent.java
+++ b/src/java.base/share/classes/jdk/internal/event/FileReadEvent.java
@@ -45,11 +45,33 @@ public static long timestamp() {
         return 0L;
     }
 
-    public static boolean shouldThrottleCommit(long duration, long timestamp) {
+    static boolean shouldThrottleCommit(long duration, long end) {
         // Generated by JFR
         return false;
     }
 
+    /**
+     * Helper method to offer the data needed to potentially commit an event.
+     * The duration of the operation is computed using the current
+     * timestamp and the given start time. If the duration meets
+     * or exceeds the configured value and is not throttled (determined by calling the
+     * generated method {@link #shouldThrottleCommit(long, long)}), an event will be
+     * emitted by calling {@link #commit(long, long, String, long, boolean)}
+     *
+     * @param start  the start time
+     * @param path  the path
+     * @param bytesRead  the number of bytes that were read, or -1 if the end of the file was reached
+     */
+    public static void offer(long start, String path, long bytesRead) {
+        long end = timestamp();
+        long duration = end - start;
+        if (shouldThrottleCommit(duration, end)) {
+            boolean endOfFile = bytesRead < 0;
+            long bytes = endOfFile ? 0 : bytesRead;
+            commit(start, duration, path, bytes, endOfFile);
+        }
+    }
+
     public static void commit(long start, long duration, String path, long bytesRead, boolean endOfFile) {
         // Generated by JFR
     }
diff --git a/src/java.base/share/classes/jdk/internal/event/FileWriteEvent.java b/src/java.base/share/classes/jdk/internal/event/FileWriteEvent.java
index 80e689c2b9c..8b3d6ab0e5d 100644
--- a/src/java.base/share/classes/jdk/internal/event/FileWriteEvent.java
+++ b/src/java.base/share/classes/jdk/internal/event/FileWriteEvent.java
@@ -44,11 +44,32 @@ public static long timestamp() {
         return 0L;
     }
 
-    public static boolean shouldThrottleCommit(long duration, long timestamp) {
+    static boolean shouldThrottleCommit(long duration, long end) {
         // Generated by JFR
         return false;
     }
 
+    /**
+     * Helper method to offer the data needed to potentially commit an event.
+     * The duration of the operation is computed using the current
+     * timestamp and the given start time. If the duration meets
+     * or exceeds the configured value and is not throttled (determined by calling the
+     * generated method {@link #shouldThrottleCommit(long, long)}), an event will be
+     * emitted by calling {@link #commit(long, long, String, long)}
+     *
+     * @param start  the start time
+     * @param path  the path
+     * @param bytesRead  the number of bytes that were written, or -1 if the end of the file was reached
+     */
+    public static void offer(long start, String path, long bytesWritten) {
+        long end = timestamp();
+        long duration = end - start;
+        if (shouldThrottleCommit(duration, end)) {
+            long bytes = bytesWritten > 0 ? bytesWritten : 0;
+            commit(start, duration, path, bytes);
+        }
+    }
+
     public static void commit(long start, long duration, String path, long bytesWritten) {
         // Generated by JFR
     }
diff --git a/src/java.base/share/classes/jdk/internal/event/SocketReadEvent.java b/src/java.base/share/classes/jdk/internal/event/SocketReadEvent.java
index da6d9eec607..48a15214a30 100644
--- a/src/java.base/share/classes/jdk/internal/event/SocketReadEvent.java
+++ b/src/java.base/share/classes/jdk/internal/event/SocketReadEvent.java
@@ -74,9 +74,10 @@ public static void commit(long start, long duration, String host, String address
      * of this method is generated automatically if jfr is enabled.
      *
      * @param duration  time in nanoseconds to complete the operation
+     * @param end  timestamp at the end of the operation
      * @return  true if the event should be commited
      */
-    public static boolean shouldThrottleCommit(long duration, long timestamp) {
+    static boolean shouldThrottleCommit(long duration, long end) {
         // Generated by JFR
         return false;
     }
diff --git a/src/java.base/share/classes/jdk/internal/event/SocketWriteEvent.java b/src/java.base/share/classes/jdk/internal/event/SocketWriteEvent.java
index d0e0ad2cd04..7b398647198 100644
--- a/src/java.base/share/classes/jdk/internal/event/SocketWriteEvent.java
+++ b/src/java.base/share/classes/jdk/internal/event/SocketWriteEvent.java
@@ -69,9 +69,10 @@ public static void commit(long start, long duration, String host, String address
      * of this method is generated automatically if jfr is enabled.
      *
      * @param duration  time in nanoseconds to complete the operation
+     * @param end  timestamp at the end of the operation
      * @return  true if the event should be commited
      */
-    public static boolean shouldThrottleCommit(long duration, long timestamp) {
+    static boolean shouldThrottleCommit(long duration, long end) {
         // Generated by JFR
         return false;
     }
diff --git a/src/java.base/share/classes/sun/nio/ch/FileChannelImpl.java b/src/java.base/share/classes/sun/nio/ch/FileChannelImpl.java
index 56a3a8f1775..ceeea75b0fd 100644
--- a/src/java.base/share/classes/sun/nio/ch/FileChannelImpl.java
+++ b/src/java.base/share/classes/sun/nio/ch/FileChannelImpl.java
@@ -269,15 +269,7 @@ private int traceImplRead(ByteBuffer dst) throws IOException {
             start = FileReadEvent.timestamp();
             bytesRead = implRead(dst);
         } finally {
-            long end = FileReadEvent.timestamp();
-            long duration = end - start;
-            if (FileReadEvent.shouldThrottleCommit(duration, end)) {
-                if (bytesRead < 0) {
-                    FileReadEvent.commit(start, duration, path, 0L, true);
-                } else {
-                    FileReadEvent.commit(start, duration, path, bytesRead, false);
-                }
-            }
+            FileReadEvent.offer(start, path, bytesRead);
         }
         return bytesRead;
     }
@@ -333,14 +325,7 @@ private long traceImplRead(ByteBuffer[] dsts, int offset, int length) throws IOE
             bytesRead = implRead(dsts, offset, length);
         } finally {
             long end = FileReadEvent.timestamp();
-            long duration = end - start;
-            if (FileReadEvent.shouldThrottleCommit(duration, end)) {
-                if (bytesRead < 0) {
-                    FileReadEvent.commit(start, duration, path, 0L, true);
-                } else {
-                    FileReadEvent.commit(start, duration, path, bytesRead, false);
-                }
-            }
+            FileReadEvent.offer(start, path, bytesRead);
         }
         return bytesRead;
     }
@@ -386,20 +371,15 @@ private int implWrite(ByteBuffer src) throws IOException {
     }
 
     private int traceImplWrite(ByteBuffer src) throws IOException {
-        int bytesWritten = 0;
+        int bytes = 0;
         long start = 0;
         try {
             start = FileWriteEvent.timestamp();
-            bytesWritten = implWrite(src);
+            bytes = implWrite(src);
         } finally {
-            long end = FileWriteEvent.timestamp();
-            long duration = end - start;
-            if (FileWriteEvent.shouldThrottleCommit(duration, end)) {
-                long bytes = bytesWritten > 0 ? bytesWritten : 0;
-                FileWriteEvent.commit(start, duration, path, bytes);
-            }
+            FileWriteEvent.offer(start, path, bytes);
         }
-        return bytesWritten;
+        return bytes;
     }
 
     @Override
@@ -449,12 +429,7 @@ private long traceImplWrite(ByteBuffer[] srcs, int offset, int length) throws IO
             start = FileWriteEvent.timestamp();
             bytesWritten = implWrite(srcs, offset, length);
         } finally {
-            long end = FileWriteEvent.timestamp();
-            long duration = end - start;
-            if (FileWriteEvent.shouldThrottleCommit(duration, end)) {
-                long bytes = bytesWritten > 0 ? bytesWritten : 0;
-                FileWriteEvent.commit(start, duration, path, bytes);
-            }
+            FileWriteEvent.offer(start, path, bytesWritten);
         }
         return bytesWritten;
     }
@@ -1208,15 +1183,7 @@ private int traceImplRead(ByteBuffer dst, long position) throws IOException {
             start = FileReadEvent.timestamp();
             bytesRead = implRead(dst, position);
         } finally {
-            long end = FileReadEvent.timestamp();
-            long duration = end - start;
-            if (FileReadEvent.shouldThrottleCommit(duration, end)) {
-                if (bytesRead < 0) {
-                    FileReadEvent.commit(start, duration, path, 0L, true);
-                } else {
-                    FileReadEvent.commit(start, duration, path, bytesRead, false);
-                }
-            }
+            FileReadEvent.offer(start, path, bytesRead);
         }
         return bytesRead;
     }
@@ -1281,12 +1248,8 @@ private int traceImplWrite(ByteBuffer src, long position) throws IOException {
             start = FileWriteEvent.timestamp();
             bytesWritten = implWrite(src, position);
         } finally {
-            long end = FileWriteEvent.timestamp();
-            long duration = end - start;
-            if (FileWriteEvent.shouldThrottleCommit(duration, end)) {
-                long bytes = bytesWritten > 0 ? bytesWritten : 0;
-                FileWriteEvent.commit(start, duration, path, bytes);
-            }
+            long bytes = bytesWritten > 0 ? bytesWritten : 0;
+            FileWriteEvent.offer(start, path, bytes);
         }
         return bytesWritten;
     }
