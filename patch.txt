diff --git a/src/jdk.jfr/share/classes/jdk/jfr/internal/tool/PrettyWriter.java b/src/jdk.jfr/share/classes/jdk/jfr/internal/tool/PrettyWriter.java
index 10f50095247..1e289115c31 100644
--- a/src/jdk.jfr/share/classes/jdk/jfr/internal/tool/PrettyWriter.java
+++ b/src/jdk.jfr/share/classes/jdk/jfr/internal/tool/PrettyWriter.java
@@ -27,6 +27,7 @@
 
 import java.io.IOException;
 import java.io.PrintWriter;
+import java.lang.reflect.Array;
 import java.nio.file.Path;
 import java.time.Duration;
 import java.time.Instant;
@@ -336,83 +337,48 @@ private void printArray(Object[] array) {
     }
 
     private void printValue(Object value, ValueDescriptor field, String postFix) {
-        if (value == null) {
-            println("N/A" + postFix);
-            return;
-        }
-        if (value instanceof RecordedObject) {
-            if (value instanceof RecordedThread rt) {
-                printThread(rt, postFix);
-                return;
-            }
-            if (value instanceof RecordedClass rc) {
-                printClass(rc, postFix);
-                return;
-            }
-            if (value instanceof RecordedClassLoader rcl) {
-                printClassLoader(rcl, postFix);
-                return;
-            }
-            if (value instanceof RecordedFrame frame) {
-                if (frame.isJavaFrame()) {
-                    printJavaFrame((RecordedFrame) value, postFix);
+        switch (value) {
+            case null -> println("N/A" + postFix);
+            case RecordedThread rt -> printThread(rt, postFix);
+            case RecordedClass rc -> printClass(rc, postFix);
+            case RecordedClassLoader rcl -> printClassLoader(rcl, postFix);
+            case RecordedFrame frame when frame.isJavaFrame() -> printJavaFrame(frame, postFix);
+            case RecordedMethod rm -> println(formatMethod(rm));
+            case RecordedObject ro when TYPE_OLD_OBJECT.equals(field.getTypeName()) -> printOldObject(ro);
+            case RecordedObject ro -> print(ro, postFix);
+            case Object[] arr -> printArray(arr);
+            case Double d when Double.isNaN(d) || d == Double.NEGATIVE_INFINITY -> println("N/A");
+            case Float f when Float.isNaN(f) || f == Float.NEGATIVE_INFINITY -> println("N/A");
+            case Long l when l == Long.MIN_VALUE -> println("N/A");
+            case Integer i when i == Integer.MIN_VALUE -> println("N/A");
+            default -> {
+                if (value.getClass().isArray()) { // Primitive array
+                    printArray(makeObjectArray(value));
                     return;
                 }
-            }
-            if (value instanceof RecordedMethod rm) {
-                println(formatMethod(rm));
-                return;
-            }
-            if (field.getTypeName().equals(TYPE_OLD_OBJECT)) {
-                printOldObject((RecordedObject) value);
-                return;
-            }
-             print((RecordedObject) value, postFix);
-            return;
-        }
-        if (value.getClass().isArray()) {
-            printArray((Object[]) value);
-            return;
-        }
-
-        if (value instanceof Double d) {
-            if (Double.isNaN(d) || d == Double.NEGATIVE_INFINITY) {
-                println("N/A");
-                return;
-            }
-        }
-        if (value instanceof Float f) {
-            if (Float.isNaN(f) || f == Float.NEGATIVE_INFINITY) {
-                println("N/A");
-                return;
-            }
-        }
-        if (value instanceof Long l) {
-            if (l == Long.MIN_VALUE) {
-                println("N/A");
-                return;
-            }
-        }
-        if (value instanceof Integer i) {
-            if (i == Integer.MIN_VALUE) {
-                println("N/A");
-                return;
-            }
-        }
-
-        if (field.getContentType() != null) {
-            if (printFormatted(field, value)) {
-                return;
+                if (field != null && field.getContentType() != null) {
+                    if (printFormatted(field, value)) {
+                        return;
+                    }
+                }
+                if (value instanceof String) {
+                    println("\"" + value + "\"");
+                } else {
+                    println(String.valueOf(value));
+                }
             }
         }
-
-        String text = String.valueOf(value);
-        if (value instanceof String) {
-            text = "\"" + text + "\"";
-        }
-        println(text);
     }
-
+  
+    private Object[] makeObjectArray(Object array) {
+        int length = Array.getLength(array);
+        Object[] result = new Object[length];
+        for (int i = 0; i < length; i++) {
+            result[i] = Array.get(array, i); // This will auto-box primitives
+        }
+        return result;
+    }
+    
     private void printOldObject(RecordedObject object) {
         println(" [");
         indent();
